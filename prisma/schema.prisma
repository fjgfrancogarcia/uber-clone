// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  rides         Ride[]    @relation("PassengerRides")
  driverRides   Ride[]    @relation("DriverRides")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ride {
  id            String     @id @default(cuid())
  pickup        String
  dropoff       String
  pickupLat     Float
  pickupLng     Float
  dropoffLat    Float
  dropoffLng    Float
  price         Float
  status        RideStatus @default(PENDING)
  passengerId   String
  driverId      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  passenger     User       @relation("PassengerRides", fields: [passengerId], references: [id])
  driver        User?      @relation("DriverRides", fields: [driverId], references: [id])
}

enum Role {
  USER
  DRIVER
  ADMIN
}

enum RideStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
} 